name: üè¢ Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Gate
  quality-gate:
    name: üîç Quality Gate
    runs-on: ubuntu-latest
    outputs:
      quality-score: ${{ steps.quality.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install quality tools
        run: |
          pip install sonar-scanner-cli radon xenon complexity-report
          pip install -r requirements-dev.txt

      - name: Run code complexity analysis
        run: |
          radon cc apps/ --json > complexity-report.json
          radon mi apps/ --json > maintainability-report.json
          xenon --max-absolute B --max-modules A --max-average A apps/

      - name: Calculate quality score
        id: quality
        run: |
          python scripts/calculate_quality_score.py
          echo "score=$(cat quality_score.txt)" >> $GITHUB_OUTPUT

      - name: Quality gate check
        run: |
          if [ "${{ steps.quality.outputs.score }}" -lt "80" ]; then
            echo "Quality gate failed: Score ${{ steps.quality.outputs.score }} < 80"
            exit 1
          fi

  # Security Compliance Scan
  security-compliance:
    name: üõ°Ô∏è Security Compliance
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SAST (Static Application Security Testing)
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_BANDIT: true
          VALIDATE_PYTHON_PYLINT: true

      - name: Run dependency vulnerability scan
        run: |
          pip install safety pip-audit
          safety check --json --output safety-report.json
          pip-audit --format=json --output=pip-audit-report.json

      - name: GDPR compliance check
        run: |
          python scripts/gdpr_compliance_check.py
          
      - name: PCI DSS compliance check
        run: |
          python scripts/pci_compliance_check.py

  # Multi-Environment Testing
  test-matrix:
    name: üß™ Test Matrix
    runs-on: ubuntu-latest
    needs: [quality-gate, security-compliance]
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        environment: ['test', 'staging']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fraud_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Run comprehensive tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fraud_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          # Unit tests
          pytest tests/unit/ -v --cov=apps --cov-report=xml
          
          # Integration tests
          pytest tests/integration/ -v
          
          # API tests
          pytest tests/api/ -v
          
          # Performance tests
          pytest tests/performance/ -v

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.environment }}-py${{ matrix.python-version }}

  # Container Security Scan
  container-security:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t fraud-analytics:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fraud-analytics:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Multi-Arch Images
  build-enterprise:
    name: üèóÔ∏è Enterprise Build
    runs-on: ubuntu-latest
    needs: [test-matrix, container-security]
    if: github.event_name != 'pull_request'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push multi-arch image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # Deploy to Development
  deploy-dev:
    name: üöÄ Deploy Development
    runs-on: ubuntu-latest
    needs: build-enterprise
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.fraudanalytics.com

    steps:
      - name: Deploy to development
        run: |
          echo "Deploying to development environment"
          # Add your deployment logic here

  # Deploy to Staging
  deploy-staging:
    name: üé≠ Deploy Staging
    runs-on: ubuntu-latest
    needs: build-enterprise
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.fraudanalytics.com

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment logic here

      - name: Run smoke tests
        run: |
          python tests/smoke/smoke_tests.py --host=https://staging.fraudanalytics.com

  # Production Deployment with Approval
  deploy-production:
    name: üåü Deploy Production
    runs-on: ubuntu-latest
    needs: [build-enterprise, deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://fraudanalytics.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Blue-Green Production Deployment
        run: |
          ./scripts/blue-green-deploy.sh
        env:
          IMAGE_TAG: ${{ needs.build-enterprise.outputs.image-tag }}
          ENVIRONMENT: production

      - name: Run production health checks
        run: |
          python tests/smoke/smoke_tests.py --host=https://fraudanalytics.com

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üéâ Fraud Analytics Platform v${{ github.event.release.tag_name }} deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-Deployment Monitoring
  post-deployment:
    name: üìä Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    steps:
      - name: Setup monitoring alerts
        run: |
          python scripts/setup_monitoring.py
          
      - name: Performance baseline
        run: |
          python scripts/performance_baseline.py

      - name: Security posture check
        run: |
          python scripts/security_posture_check.py